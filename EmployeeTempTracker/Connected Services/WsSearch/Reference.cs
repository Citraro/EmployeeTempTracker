//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WsSearch
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.intellinetics.com", ConfigurationName="WsSearch.ICMSearchServiceSoap")]
    public interface ICMSearchServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.intellinetics.com/Query", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WsSearch.QueryResult Query(string loginSessionID, int appID, string columnList, string folderSearchFilter, string documentSearchFilter, int dataShape, int dataMode, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.intellinetics.com/Query", ReplyAction="*")]
        System.Threading.Tasks.Task<WsSearch.QueryResult> QueryAsync(string loginSessionID, int appID, string columnList, string folderSearchFilter, string documentSearchFilter, int dataShape, int dataMode, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.intellinetics.com/QueryEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WsSearch.QueryResult QueryEx(string loginSessionID, int appID, string columnList, string folderSearchFilter, string objectSearchFilter, int dataMode, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.intellinetics.com/QueryEx", ReplyAction="*")]
        System.Threading.Tasks.Task<WsSearch.QueryResult> QueryExAsync(string loginSessionID, int appID, string columnList, string folderSearchFilter, string objectSearchFilter, int dataMode, int maxResults);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.intellinetics.com")]
    public partial class QueryResult
    {
        
        private ServiceError serviceErrorField;
        
        private System.Xml.XmlNode xDResultSetField;
        
        private byte[] gZipDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ServiceError ServiceError
        {
            get
            {
                return this.serviceErrorField;
            }
            set
            {
                this.serviceErrorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.Xml.XmlNode XDResultSet
        {
            get
            {
                return this.xDResultSetField;
            }
            set
            {
                this.xDResultSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=2)]
        public byte[] GZipData
        {
            get
            {
                return this.gZipDataField;
            }
            set
            {
                this.gZipDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.intellinetics.com")]
    public partial class ServiceError
    {
        
        private string messageField;
        
        private int errorCodeField;
        
        private string sourceField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int ErrorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Source
        {
            get
            {
                return this.sourceField;
            }
            set
            {
                this.sourceField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ICMSearchServiceSoapChannel : WsSearch.ICMSearchServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CMSearchServiceSoapClient : System.ServiceModel.ClientBase<WsSearch.ICMSearchServiceSoap>, WsSearch.ICMSearchServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CMSearchServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CMSearchServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), CMSearchServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CMSearchServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CMSearchServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CMSearchServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CMSearchServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CMSearchServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public WsSearch.QueryResult Query(string loginSessionID, int appID, string columnList, string folderSearchFilter, string documentSearchFilter, int dataShape, int dataMode, int maxResults)
        {
            return base.Channel.Query(loginSessionID, appID, columnList, folderSearchFilter, documentSearchFilter, dataShape, dataMode, maxResults);
        }
        
        public System.Threading.Tasks.Task<WsSearch.QueryResult> QueryAsync(string loginSessionID, int appID, string columnList, string folderSearchFilter, string documentSearchFilter, int dataShape, int dataMode, int maxResults)
        {
            return base.Channel.QueryAsync(loginSessionID, appID, columnList, folderSearchFilter, documentSearchFilter, dataShape, dataMode, maxResults);
        }
        
        public WsSearch.QueryResult QueryEx(string loginSessionID, int appID, string columnList, string folderSearchFilter, string objectSearchFilter, int dataMode, int maxResults)
        {
            return base.Channel.QueryEx(loginSessionID, appID, columnList, folderSearchFilter, objectSearchFilter, dataMode, maxResults);
        }
        
        public System.Threading.Tasks.Task<WsSearch.QueryResult> QueryExAsync(string loginSessionID, int appID, string columnList, string folderSearchFilter, string objectSearchFilter, int dataMode, int maxResults)
        {
            return base.Channel.QueryExAsync(loginSessionID, appID, columnList, folderSearchFilter, objectSearchFilter, dataMode, maxResults);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ICMSearchServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ICMSearchServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ICMSearchServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://beta.intellinetics.com/IntellivueWebAPI/ICMSearchService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ICMSearchServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://beta.intellinetics.com/IntellivueWebAPI/ICMSearchService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ICMSearchServiceSoap,
            
            ICMSearchServiceSoap12,
        }
    }
}
